trigger: none

pool: amiteshpool

stages:
# -----------------------
# Install Terraform
# -----------------------
- stage: TerraformInstall
  jobs:
  - job: TerraformInstallJob
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'

# -----------------------
# Run tfsec
# -----------------------
- stage: TFSec
  jobs:
  - job: TFSecJob
    continueOnError: true    # <-- tfsec won't fail the pipeline
    steps:
    - task: tfsec@1
      inputs:
        version: 'v1.26.0'
        args: '--format junit --out tfsec-results.xml'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'tfsec-results.xml'
        failTaskOnFailedTests: false

# -----------------------
# Terraform Init + Plan
# -----------------------
- stage: TerraformInit
  jobs:
  - job: TerraformInitandPlanJob
    steps:
    - task: TerraformTask@5
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/azinfra/Environment/dev'
        backendServiceArm: 'amiteshserviceconnection'
        backendAzureRmStorageAccountName: 'pkdgstorage'
        backendAzureRmContainerName: 'pkdgcontainer'
        backendAzureRmKey: 'terraform.tfstate'

    - task: TerraformTask@5
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/azinfra/Environment/dev'
        environmentServiceNameAzureRM: 'amiteshserviceconnection'

# -----------------------
# Terraform Init + Apply
# -----------------------
- stage: TerraformApply
  jobs:
  - job: TerraformInitandApply
    steps:
    - task: TerraformTask@5
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/azinfra/Environment/dev'
        backendServiceArm: 'amiteshserviceconnection'
        backendAzureRmStorageAccountName: 'pkdgstorage'
        backendAzureRmContainerName: 'pkdgcontainer'
        backendAzureRmKey: 'terraform.tfstate'

    - task: TerraformTask@5
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/azinfra/Environment/dev'
        environmentServiceNameAzureRM: 'amiteshserviceconnection'
